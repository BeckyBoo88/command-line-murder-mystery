~/Desktop/general-assembly/unit-1/deliverables/command-line-murder-mystery(main*) Â» history
    1  true
    2  brew install git
    3  git --version
    4  brew upgrade git
    5  brew install --cask visual-studio-code
    6  code ~/.zschrc
    7  echo /bin/zsh
    8  sh -c #!/bin/sh # # This script should be run via curl: # sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" # or via wget: # sh -c "$(wget -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" # or via fetch: # sh -c "$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" # # As an alternative, you can first download the install script and run it afterwards: # wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh # sh install.sh # # You can tweak the install behavior by setting variables when running the script. For # example, to change the path to the Oh My Zsh repository: # ZSH=~/.zsh sh install.sh # # Respects the following environment variables: # ZSH - path to the Oh My Zsh repository folder (default: $HOME/.oh-my-zsh) # REPO - name of the GitHub repo to install from (default: ohmyzsh/ohmyzsh) # REMOTE - full remote URL of the git repo to install (default: GitHub via HTTPS) # BRANCH - branch to check out immediately after install (default: master) # # Other options: # CHSH - 'no' means the installer will not change the default shell (default: yes) # RUNZSH - 'no' means the installer will not run zsh after the install (default: yes) # KEEP_ZSHRC - 'yes' means the installer will not replace an existing .zshrc (default: no) # # You can also pass some arguments to the install script to set some these options: # --skip-chsh: has the same behavior as setting CHSH to 'no' # --unattended: sets both CHSH and RUNZSH to 'no' # --keep-zshrc: sets KEEP_ZSHRC to 'yes' # For example: # sh install.sh --unattended # or: # sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended # set -e # Track if $ZSH was provided custom_zsh=${ZSH:+yes} # Default settings ZSH=${ZSH:-~/.oh-my-zsh} REPO=${REPO:-ohmyzsh/ohmyzsh} REMOTE=${REMOTE:-https://github.com/${REPO}.git} BRANCH=${BRANCH:-master} # Other options CHSH=${CHSH:-yes} RUNZSH=${RUNZSH:-yes} KEEP_ZSHRC=${KEEP_ZSHRC:-no} command_exists() { command -v "$@" >/dev/null 2>&1 } fmt_error() { printf '%sError: %s%s
' "$BOLD$RED" "$*" "$RESET" >&2 } fmt_underline() { printf '[4m%s[24m
' "$*" } fmt_code() { # shellcheck disable=SC2016 # backtic in single-quote printf '`[38;5;247m%s%s`
' "$*" "$RESET" } setup_color() { # Only use colors if connected to a terminal if [ -t 1 ]; then RED=$(printf '[31m') GREEN=$(printf '[32m') YELLOW=$(printf '[33m') BLUE=$(printf '[34m') BOLD=$(printf '[1m') RESET=$(printf '[m') else RED="" GREEN="" YELLOW="" BLUE="" BOLD="" RESET="" fi } setup_ohmyzsh() { # Prevent the cloned repository from having insecure permissions. Failing to do # so causes compinit() calls to fail with "command not found: compdef" errors # for users with insecure umasks (e.g., "002", allowing group writability). Note # that this will be ignored under Cygwin by default, as Windows ACLs take # precedence over umasks except for filesystems mounted with option "noacl". umask g-w,o-w echo "${BLUE}Cloning Oh My Zsh...${RESET}" command_exists git || { fmt_error "git is not installed" exit 1 } ostype=$(uname) if [ -z "${ostype%CYGWIN*}" ] && git --version | grep -q msysgit; then fmt_error "Windows/MSYS Git is not supported on Cygwin" fmt_error "Make sure the Cygwin git package is installed and is first on the \$PATH" exit 1 fi git clone -c core.eol=lf -c core.autocrlf=false \ -c fsck.zeroPaddedFilemode=ignore \ -c fetch.fsck.zeroPaddedFilemode=ignore \ -c receive.fsck.zeroPaddedFilemode=ignore \ --depth=1 --branch "$BRANCH" "$REMOTE" "$ZSH" || { fmt_error "git clone of oh-my-zsh repo failed" exit 1 } echo } setup_zshrc() { # Keep most recent old .zshrc at .zshrc.pre-oh-my-zsh, and older ones # with datestamp of installation that moved them aside, so we never actually # destroy a user's original zshrc echo "${BLUE}Looking for an existing zsh config...${RESET}" # Must use this exact name so uninstall.sh can find it OLD_ZSHRC=~/.zshrc.pre-oh-my-zsh if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]; then # Skip this if the user doesn't want to replace an existing .zshrc if [ "$KEEP_ZSHRC" = yes ]; then echo "${YELLOW}Found ~/.zshrc.${RESET} ${GREEN}Keeping...${RESET}" return fi if [ -e "$OLD_ZSHRC" ]; then OLD_OLD_ZSHRC="${OLD_ZSHRC}-$(date +%Y-%m-%d_%H-%M-%S)" if [ -e "$OLD_OLD_ZSHRC" ]; then fmt_error "$OLD_OLD_ZSHRC exists. Can't back up ${OLD_ZSHRC}" fmt_error "re-run the installer again in a couple of seconds" exit 1 fi mv "$OLD_ZSHRC" "${OLD_OLD_ZSHRC}" echo "${YELLOW}Found old ~/.zshrc.pre-oh-my-zsh." \ "${GREEN}Backing up to ${OLD_OLD_ZSHRC}${RESET}" fi echo "${YELLOW}Found ~/.zshrc.${RESET} ${GREEN}Backing up to ${OLD_ZSHRC}${RESET}" mv ~/.zshrc "$OLD_ZSHRC" fi echo "${GREEN}Using the Oh My Zsh template file and adding it to ~/.zshrc.${RESET}" sed "/^export ZSH=/ c\ export ZSH=\"$ZSH\" " "$ZSH/templates/zshrc.zsh-template" > ~/.zshrc-omztemp mv -f ~/.zshrc-omztemp ~/.zshrc echo } setup_shell() { # Skip setup if the user wants or stdin is closed (not running interactively). if [ "$CHSH" = no ]; then return fi # If this user's login shell is already "zsh", do not attempt to switch. if [ "$(basename -- "$SHELL")" = "zsh" ]; then return fi # If this platform doesn't provide a "chsh" command, bail out. if ! command_exists chsh; then cat <<EOF I can't change your shell automatically because this system does not have chsh. ${BLUE}Please manually change your default shell to zsh${RESET} EOF return fi echo "${BLUE}Time to change your default shell to zsh:${RESET}" # Prompt for user choice on changing the default login shell printf '%sDo you want to change your default shell to zsh? [Y/n]%s ' \ "$YELLOW" "$RESET" read -r opt case $opt in y*|Y*|"") echo "Changing the shell..." ;; n*|N*) echo "Shell change skipped."; return ;; *) echo "Invalid choice. Shell change skipped."; return ;; esac # Check if we're running on Termux case "$PREFIX" in *com.termux*) termux=true; zsh=zsh ;; *) termux=false ;; esac if [ "$termux" != true ]; then # Test for the right location of the "shells" file if [ -f /etc/shells ]; then shells_file=/etc/shells elif [ -f /usr/share/defaults/etc/shells ]; then # Solus OS shells_file=/usr/share/defaults/etc/shells else fmt_error "could not find /etc/shells file. Change your default shell manually." return fi # Get the path to the right zsh binary # 1. Use the most preceding one based on $PATH, then check that it's in the shells file # 2. If that fails, get a zsh path from the shells file, then check it actually exists if ! zsh=$(command -v zsh) || ! grep -qx "$zsh" "$shells_file"; then if ! zsh=$(grep '^/.*/zsh$' "$shells_file" | tail -1) || [ ! -f "$zsh" ]; then fmt_error "no zsh binary found or not present in '$shells_file'" fmt_error "change your default shell manually." return fi fi fi # We're going to change the default shell, so back up the current one if [ -n "$SHELL" ]; then echo "$SHELL" > ~/.shell.pre-oh-my-zsh else grep "^$USERNAME:" /etc/passwd | awk -F: '{print $7}' > ~/.shell.pre-oh-my-zsh fi # Actually change the default shell to zsh if ! chsh -s "$zsh"; then fmt_error "chsh command unsuccessful. Change your default shell manually." else export SHELL="$zsh" echo "${GREEN}Shell successfully changed to '$zsh'.${RESET}" fi echo } main() { # Run as unattended if stdin is not a tty if [ ! -t 0 ]; then RUNZSH=no CHSH=no fi # Parse arguments while [ $# -gt 0 ]; do case $1 in --unattended) RUNZSH=no; CHSH=no ;; --skip-chsh) CHSH=no ;; --keep-zshrc) KEEP_ZSHRC=yes ;; esac shift done setup_color if ! command_exists zsh; then echo "${YELLOW}Zsh is not installed.${RESET} Please install zsh first." exit 1 fi if [ -d "$ZSH" ]; then echo "${YELLOW}The \$ZSH folder already exists ($ZSH).${RESET}" if [ "$custom_zsh" = yes ]; then cat <<EOF You ran the installer with the \$ZSH setting or the \$ZSH variable is exported. You have 3 options: 1. Unset the ZSH variable when calling the installer: $(fmt_code "ZSH= sh install.sh") 2. Install Oh My Zsh to a directory that doesn't exist yet: $(fmt_code "ZSH=path/to/new/ohmyzsh/folder sh install.sh") 3. (Caution) If the folder doesn't contain important information, you can just remove it with $(fmt_code "rm -r $ZSH") EOF else echo "You'll need to remove it if you want to reinstall." fi exit 1 fi setup_ohmyzsh setup_zshrc setup_shell printf %s "$GREEN" cat <<'EOF' __ __ ____ / /_ ____ ___ __ __ ____ _____/ /_ / __ \/ __ \ / __ `__ \/ / / / /_ / / ___/ __ \ / /_/ / / / / / / / / / / /_/ / / /_(__ ) / / / \____/_/ /_/ /_/ /_/ /_/\__, / /___/____/_/ /_/ /____/ ....is now installed! EOF cat <<EOF Before you scream Oh My Zsh! please look over the ~/.zshrc file to select plugins, themes, and options. â€¢ Follow us on Twitter: $(fmt_underline https://twitter.com/ohmyzsh) â€¢ Join our Discord server: $(fmt_underline https://discord.gg/ohmyzsh) â€¢ Get stickers, shirts, coffee mugs and other swag: $(fmt_underline https://shop.planetargon.com/collections/oh-my-zsh) EOF printf %s "$RESET" if [ $RUNZSH = no ]; then echo "${YELLOW}Run zsh to try it out.${RESET}" exit fi exec zsh -l } main "$@"
    9  git config --global init.defaultBranch main
   10  git config --global user.name BeckyBoo88
   11  git config --global user.email rbooco07@gmail.com
   12  git config --global push.default simple

   13  git config --global credential.helper cache

   14  ~/.gitconfig
   15  code ~/.gitconfig
   16  ssh-keygen -t ed25519 -C rbooco07@gmail.com
   17  eval SSH_AUTH_SOCK=/var/folders/_2/kcqpkdmn35z3s0j0nzmj3wdr0000gn/T//ssh-2WwgBrs4ZwFI/agent.37837; export SSH_AUTH_SOCK; SSH_AGENT_PID=37838; export SSH_AGENT_PID; echo Agent pid 37838;
   18  open ~/.ssh/config
   19  touch ~/.ssh/config
   20  open ~/.ssh/config
   21  âžœ  ~ open ~/.ssh/config

   22  open ~/.ssh/config
   23  ssh-add -K ~/.ssh/id_ed25519
   24  pbcopy < ~/.ssh/id_ed25519.pub
   25  code ~/.zshrc
   26  pwd
   27  open . 
   28  ls 
   29  cd documents
   30  ls
   31  cd documents
   32  ls
   33  cd .
   34  pwd
   35  cd .
   36  cd ..
   37  pwd
   38  ls
   39  cd desktop
   40  cd .
   41  pwd
   42  cd ..
   43  cd Desktop
   44  mkdir general-assembly
   45  ls
   46  cd general-assembly
   47  pwd
   48  mk dir unit-1
   49  mkdir unit-1
   50  ls
   51  mkdir unit-1/deliverables
   52  ls
   53  ls unit-1
   54  pwd
   55  touch about.txt
   56  ls
   57  cat about.txt
   58  echo hello! This is my GA file folder.
   59  echo Hello! This is my GA file folder. > about.txt
   60  cat about.txt
   61  cat about.txt | grep Hello
   62  pwd
   63  mkdir git-basic
   64  cd git-basic
   65  git status
   66  cd
   67  cd Desktop/
   68  dc general-assembly
   69  cd general-assembly
   70  cd unit-1
   71  cd deliverables
   72  git clone https://github.com/BeckyBoo88/command-line-murder-mystery.git
   73  ls
   74  cd command-line-murder-mystery
   75  ls
   76  code ~/.zshrc
   77  cd unit-1
   78  pwd
   79  ls
   80  cd Desktop
   81  ls
   82  cd general-assembly
   83  ls
   84  cd unit-1
   85  ls
   86  cd deliverables
   87  ls
   88  cd command-line-murder-mystery
   89  cat instructions
   90  cat cheatsheet.md
   91  nano cheatsheet.md
   92  cd general-assembly
   93  cd Desktop
   94  cd-general-assembly
   95  cd general-assembly
   96  ls
   97  cd unit-1
   98  ls
   99  cd deliverables
  100  ls
  101  cd command-line-murder-mystery
  102  ls
  103  ls -a
  104  cd mystery
  105  ls
  106  grep -r CLUE *
  107  cd interviews
  108  ls
  109  grep CLUES
  110  cd ..
  111  grep CLUE interview
  112  grep CLUE interviews
  113  cd ..
  114  ls
  115  cd mystery
  116  ls
  117  grep CLUE crimescene > clues.txt
  118  ls
  119  cat clues.txt
  120  cd people
  121  pwd
  122  ls
  123  cd crimescene
  124  cd memberships
  125  ls
  126  cd AAA
  127  ls -a
  128  cd .
  129  ls
  130  cd ..
  131  pwd
  132  ls
  133  cd ..
  134  ls
  135  cd hint1
  136  cat hint1
  137  cat hint2
  138  cd mystery
  139  ls
  140  head -n 20 people
  141  cd streets
  142  ls
  143  cat Walton Street
  144  cat Mystic_Street
  145  cd Glenville_Avenue
  146  cat Glenville_Avenue
  147  cd ..
  148  ls
  149  cd ..
  150  ls
  151  cat hint3
  152  cat hint 4
  153  cat hint4
  154  cd mystery
  155  ls
  156  grep -r Annabel*
  157  grep -r Annabel *
  158  cat people
  159  ls
  160  cd memberships
  161  ls
  162  cat AAA
  163  cd ..
  164  ls
  165  cat vehicles
  166  ls
  167  cd ..
  168  ls
  169  cat hint6
  170  cat hint7
  171  ls
  172  cd mystery
  173  ls
  174  grep -r CLUE *
  175  ls
  176  grep -E 'AAA|library'
  177  grep -E 'AAA|Delta' memberships
  178  grep -e AAA -e Delta memberships
  179  cd memberships
  180  grep -E 'AAA|Delta' memberships
  181  cd ..
  182  ls
  183  grep 6 vehicles
  184  ls
  185  grep Annabel
  186  grep Annabel memberships
  187  cd memberships
  188  grep Annabel
  189  grep Annabel memberships
  190  ls
  191  cd ..
  192  ls
  193  cat people
  194  cd ..
  195  ls
  196  cd hint8
  197  cat hint8
  198  cd mystery
  199  ls
  200  cd memberships
  201  grep AAA|Delta SkyMiles|Library
  202  cd ..
  203  ls
  204  head people
  205  head vehicles
  206  grep Annabel people
  207  	head -n 173 streets/Mattapan_Street | tail -n 1

  208  cat INTERVIEW #9437737
  209  cd interview
  210  ls
  211  cd interviews
  212  cd interview #9437737
  213  ls
  214  cat interview-9437737
  215  head -n 176 streets/Haley_Street | tail -n 1
  216  grep Suspect
  217  grep suspect interviews
  218  cd ..
  219  head -n 176 streets/Haley_Street | tail -n 1
  220  cd interviews
  221  cat interview-871877
  222  cd ..
  223  head -n 40 streets/Hart_Place | tail -n 1
  224  cd interviews
  225  cat interview-47246024
  226  cd ..
  227  head -n 179 streets/Buckingham_Place | tail -n 1
  228  cd interviews
  229  cat interview-699607
  230  cd ..
  231  head vehicles
  232  grep Blue vehicles
  233  head vehicles
  234  grep -e blue -honda vechiles
  235  egrep 'blue|honda' vehicles
  236  grep -e blue -e hona vehicles
  237  grep -A 5 L337 mystery/vehicles
  238  grep -A 5 L337 vehicles
  239  ls
  240  memberships
  241  grep Katie Park
  242  grep Katie Park memberships
  243  cd ..
  244  grep Katie Park memberships
  245  memberships
  246  ls
  247  cat AAA
  248  grep Mike memberships
  249  grep Mike AAA
  250  grep Mike Delta SkyMiles
  251  ls
  252  grep Mike Delta_SkyMiles
  253  grep Mike library.txt
  254  grep Mike Museum_of_Bash_History
  255  grep Katie AAA
  256  grep Katie Delta_SkyMiles
  257  grep Katie library.txt
  258  grep Katie Museum_of_Bash_History
  259  grep John AAA
  260  grep John Delta_SkyMiles
  261  grep Erika AAA
  262  grep Matt AAA
  263  grep Matt Delta_SkyMiles
  264  grep Matt library.txt
  265  grep Matt Museum_of_Bash_History
  266  grep Brian AAA
  267  grep Brian Delta_SkyMiles
  268  grep Brian library.txt
  269  grep Brian Museum_of_Bash_History
  270  grep Al AAA
  271  grep Shaw AAA
  272  grep Shaw Delta_SkyMiles
  273  grep Miranda AAA
  274  grep Miranda Delta_SkyMiles
  275  grep Miranda library.txt
  276  grep Germuska AAA
  277  grep Germuska Delta_SkyMiles
  278  grep Jeremy AAA
  279  grep Jeremy Delta_SkyMiles
  280  grep Jeremy library.txt
  281  grep Jeremy Museum_of_Bash_History
  282  grep Jacki AAA
  283  cd ...
  284  ls
  285  cd mystery
  286  ls
  287  streets
  288  grep Bostock streets
  289  ls
  290  cd ..
  291  ls
  292  grep Matt people
  293  grep Boyer people
  294  grep Bowers people
  295  cd ..
  296  head -n 79 streets/Alpine_Street | tail -n 1
  297  cd ..
  298  head -n 79 streets/Alpine_Street | tail -n 1
  299  cd mystery
  300  pwd
  301  ls
  302  cd command-line-murder-mystery
  303  head -n 183 streets/Harbor_Point_Boulevard | tail -n 1
  304  ls
  305  cd mystery
  306  head -n 183 streets/Harbor_Point_Boulevard | tail -n 1
  307  head -n 79 streets/Alpine_Street | tail -n 1
  308  head -n 284 streets/Dunstable_Road | tail -n 1
  309  cd interviews
  310  cd interview-862173
  311  ls
  312  cat interview-862173
  313  cat interview-628618
  314  cat interview-9620713
  315  cd ..
  316  ls
  317  grep Waite vehicles
  318  vehicles
  319  grep -A 5 Boyer vehicles
  320  grep -A 5 Bowers vehicles
  321  cd ..
  322  pwd
  323  git add solution.txt
  324  git add
  325  git add .solution.txt
  326  git add.'solution.txt'
  327  git add .solution.txt
  328  mkdir solution.txt
  329  ls
-------------------------------------------------------------------------------------------
~/Desktop/general-assembly/unit-1/deliverables/command-line-murder-mystery(main*) Â» 
 Suspect: Jeremy Bowers
